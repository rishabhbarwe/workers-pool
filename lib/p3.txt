<_WorkerMessagePageState> {
  late List<DocumentSnapshot> requests = [];
  late Map<String, String> jobTitles = {}; // Store job titles

  @override
  void initState() {
    super.initState();
    // Fetch requests sent to the current user
    fetchRequests();
  }

  Future<void> fetchRequests() async {
    try {
      User? currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser != null) {
        QuerySnapshot snapshot = await FirebaseFirestore.instance
            .collection('requests')
            .where('senderId', isEqualTo: currentUser.uid)
            .get();
        setState(() {
          requests = snapshot.docs;
        });
        // Fetch job titles for each request
        await fetchJobTitles();
      }
    } catch (e) {
      print('Error fetching requests: $e');
    }
  }

  Future<void> fetchJobTitles() async {
    try {
      for (var request in requests) {
        DocumentSnapshot jobSnapshot = await FirebaseFirestore.instance
            .collection('jobpostings')
            .doc(request['jobId'])
            .get();
        setState(() {
          jobTitles[request.id] = jobSnapshot['jobtitle'];
        });
      }
    } catch (e) {
      print('Error fetching job titles: $e');
    }
  }

  void deleteRequest(String requestId) async {
    try {
      await FirebaseFirestore.instance
          .collection('requests')
          .doc(requestId)
          .delete();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Request deleted')),
      );
      // Fetch updated requests
      fetchRequests();
    } catch (e) {
      print('Error deleting request: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to delete request')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Worker Messages',
          style: AppStyles.appBarTitle,
        ),
        backgroundColor: AppStyles.appBarColor,
      ),
      // ignore: unnecessary_null_comparison
      body: requests == null
          ? Center(
              child: CircularProgressIndicator(),
            )
          : requests.isEmpty
              ? Center(
                  child: Text('No requests found'),
                )
              : ListView.builder(
                  itemCount: requests.length,
                  itemBuilder: (context, index) {
                    DocumentSnapshot request = requests[index];
                    String status = request['status'] ?? 'PENDING';
                    String jobTitle = jobTitles[request.id] ?? ''; // Get job title from map
                    return Dismissible(
                      key: Key(request.id),
                      direction: DismissDirection.endToStart,
                      background: Container(
                        color: Colors.red,
                        alignment: Alignment.centerRight,
                        padding: EdgeInsets.only(right: 20),
                        child: Icon(
                          Icons.delete,
                          color: Colors.white,
                        ),
                      ),
                      onDismissed: (direction) {
                        deleteRequest(request.id);
                      },
                      child: Padding(
                        padding: EdgeInsets.all(1.0),
                        child: Card(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                          child: ListTile(
                            title: status == 'PENDING'
                                ? Text(
                                    'The other user has not responded to this request.',
                                    style: TextStyle(
                                      color: Colors.grey,
                                    ),
                                  )
                                : Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'Job Title: $jobTitle',
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                      Text(
                                        'Request status: $status',
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: status == 'ACCEPTED'
                                              ? Colors.green
                                              : Colors.red,
                                        ),
                                      ),
                                    ],
                                  ),
                            tileColor: status == 'PENDING'
                                ? Colors.yellow[100]
                                : null,
                            contentPadding: EdgeInsets.all(12),
                          ),
                        ),
                      ),
                    );
                  },
                ),
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.work),
            label: 'WJobs',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.message),
            label: 'WRequests',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.post_add),
            label: 'WJob History',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'WProfile',
          ),
        ],
        selectedItemColor: AppStyles.appBarColor,
        unselectedItemColor: Colors.grey,
        backgroundColor: Colors.white,
        currentIndex: 1,
        onTap: (index) {
          if (index == 0) {
            // Navigate to the WorkerHomePage when the job icon is tapped
            Navigator.of(context).pushReplacement(
              MaterialPageRoute(builder: (context) => WorkerHomePage()),
            );
          }
          if (index == 2) {
            // Navigate to the WorkerJobHistoryPage when the job history icon is tapped
            Navigator.of(context).push(
              MaterialPageRoute(builder: (context) => WorkerJobHistoryPage()),
            );
          }
          if (index == 3) {
            // Navigate to the WorkerAccountPage when the profile icon is tapped
            Navigator.of(context).push(
              MaterialPageRoute(builder: (context) => WorkerAccountPage()),
            );
          }
        },
      ),
    );
  }
}


Future<void> fetchRequests() async {
  try {
    User? currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser != null) {
      QuerySnapshot snapshot = await FirebaseFirestore.instance
          .collection('requests')
          .where('senderId', isEqualTo: currentUser.uid)
          .get();
      setState(() {
        requests = snapshot.docs;
      });
    }
  } catch (e) {
    print('Error fetching requests: $e');
  }
}

@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text(
        'Worker Messages',
        style: AppStyles.appBarTitle,
      ),
      backgroundColor: AppStyles.appBarColor,
    ),
    // ignore: unnecessary_null_comparison
    body: requests == null
        ? Center(
            child: CircularProgressIndicator(),
          )
        : requests.isEmpty
            ? Center(
                child: Text('No requests found'),
              )
            : ListView.builder(
                itemCount: requests.length,
                itemBuilder: (context, index) {
                  DocumentSnapshot request = requests[index];
                  String status = request['status'] ?? 'PENDING';
                  String companyName = request['companyName'] ?? 'Company Name';
                  String jobTitle = request['jobTitle'] ?? 'Job Title';
                  // Get job title from map
                  return Dismissible(
                    key: Key(request.id),
                    direction: DismissDirection.endToStart,
                    background: Container(
                      color: Colors.red,
                      alignment: Alignment.centerRight,
                      padding: EdgeInsets.only(right: 20),
                      child: Icon(
                        Icons.delete,
                        color: Colors.white,
                      ),
                    ),
                    onDismissed: (direction) {
                      deleteRequest(request.id);
                    },
                    child: Padding(
                      padding: EdgeInsets.all(1.0),
                      child: Card(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                          side: BorderSide(color: Colors.grey.shade300),
                        ),
                        child: ListTile(
                          title: status == 'PENDING'
                              ? Text(
                                  'The other user has not responded to this request.',
                                  style: TextStyle(
                                    color: Colors.grey,
                                  ),
                                )
                              : Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Request status: $status',
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        color: status == 'ACCEPTED'
                                            ? Colors.green
                                            : Colors.red,
                                      ),
                                    ),
                                    SizedBox(height: 8),
                                    Text(
                                      'Company Name: $companyName',
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        color: Colors.black,
                                      ),
                                    ),
                                    SizedBox(height: 8),
                                    Text(
                                      'Job Title: $jobTitle',
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        color: Colors.black,
                                      ),
                                    ),
                                  ],
                                ),
                          tileColor:
                              status == 'PENDING' ? Colors.yellow[100] : null,
                          contentPadding: EdgeInsets.all(12),
                        ),
                      ),
                    ),
                  );
                },
              ),
  );
}


body: requests != null
    ? ListView.builder(
        itemCount: requests.length,
        itemBuilder: (context, index) {
          DocumentSnapshot request = requests[index];
          String requestId = request.id;
          String status = request['status'] ?? 'PENDING';
          String jobTitle = request['jobTitle'] ?? 'Job Title';
          String companyName = request['companyName'] ?? 'Company Name';
          Color tileColor = status == 'ACCEPTED' || status == 'REJECTED'
              ? Colors.grey
              : status == 'PENDING'
                  ? Colors.blueGrey[100]
                  : Colors.amberAccent;
          return Dismissible(
            key: ValueKey(requestId),
            direction: DismissDirection.endToStart,
            background: Container(
              color: Colors.red,
              child: const Icon(
                Icons.delete,
                color: Colors.white,
                size: 30,
              ),
              alignment: Alignment.centerRight,
              padding: const EdgeInsets.only(right: 20.0),
            ),
            onDismissed: (direction) {
              deleteRequest(requestId);
            },
            child: FutureBuilder(
              future: fetchSenderName(requests[index]['senderId']),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const CircularProgressIndicator();
                } else if (snapshot.hasError) {
                  return Text('Error: ${snapshot.error}');
                } else {
                  String senderName = snapshot.data.toString();
                  return Container(
                    margin: const EdgeInsets.symmetric(
                        vertical: 8, horizontal: 16),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(10),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.grey.withOpacity(0.5),
                          spreadRadius: 1,
                          blurRadius: 2,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: ListTile(
                      title: Text(
                        'Request from: $senderName \nCompany : $companyName\nJob: $jobTitle',
                        style: const TextStyle(
                          fontSize: 15,
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                        ),
                      ),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          ElevatedButton(
                            onPressed: () => acceptRequest(requestId),
                            style: ElevatedButton.styleFrom(
                              primary: Colors.green,
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 16),
                            ),
                            child: const Text(
                              'Accept',
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          const SizedBox(width: 8),
                          ElevatedButton(
                            onPressed: () => rejectRequest(requestId),
                            style: ElevatedButton.styleFrom(
                              primary: Colors.red,
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 16),
                            ),
                            child: const Text(
                              'Reject',
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ),
                      tileColor: tileColor,
                      contentPadding: EdgeInsets.all(12),
                    ),
                  );
                }
              },
            ),
          );
        },
      )
