import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'email_verification_page.dart';
import 'otp_verification_page.dart';
import 'style.dart'; // Import the style.dart file

class SignupForm extends StatefulWidget {
  @override
  _SignupFormState createState() => _SignupFormState();
}

class _SignupFormState extends State<SignupForm> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _phoneNumberController = TextEditingController();
  String? _selectedRole;

  Future<void> _signup() async {
    try {
      // Create user with email and password
      await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: _emailController.text,
        password: _passwordController.text,
      );

      // Send email verification
      User? user = FirebaseAuth.instance.currentUser;
      if (user != null && !user.emailVerified) {
        await user.sendEmailVerification();
      }

      // Send OTP to phone number
      await _auth.verifyPhoneNumber(
        phoneNumber: _phoneNumberController.text,
        verificationCompleted: (PhoneAuthCredential credential) {},
        verificationFailed: (FirebaseAuthException e) {
          print(e.message);
        },
        codeSent: (String verificationId, int? resendToken) {
          // Navigate to OTP verification page
          Navigator.of(context).pushReplacement(
            MaterialPageRoute(
              builder: (context) => OtpVerificationPage(verificationId),
            ),
          );
        },
        codeAutoRetrievalTimeout: (String verificationId) {},
      );

      // Save user details to Firestore
      await FirebaseFirestore.instance
          .collection('users')
          .doc(_auth.currentUser!.uid)
          .set({
        'email': _emailController.text,
        'phoneNumber': _phoneNumberController.text,
        'role': _selectedRole,
      });

      // Navigate to the email verification page
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          builder: (context) => EmailVerificationPage(),

        ),
      );
    } catch (e) {
      // Handle signup errors here.
      print(e.toString());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(40.0),
      child: ListView(
        children: [
          Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Register/Sign Up',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
          
                  color: Colors.deepPurple,
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 20),
              TextField(
                controller: _emailController,
                decoration: AppStyles.textFieldDecoration.copyWith(
                  labelText: 'Email',
                ),
                cursorColor: Colors.deepPurple,
              ),
              SizedBox(height: 8),
              TextField(
                controller: _passwordController,
                decoration: AppStyles.textFieldDecoration.copyWith(
                  labelText: 'Password',
                ),
                obscureText: true,
                cursorColor: Colors.deepPurple,
              ),
              SizedBox(height: 8),
              TextField(
                controller: _phoneNumberController,
          
                decoration: AppStyles.textFieldDecoration.copyWith(
                  labelText: 'Phone Number',
                ),
                cursorColor: Colors.deepPurple,
              ),
              SizedBox(height: 8),
              DropdownButtonFormField<String>(
                value: _selectedRole,
                onChanged: (value) {
                  setState(() {
                    _selectedRole = value;
                  });
                },
                items: [
                  DropdownMenuItem(
                    value: 'worker',
                    child: Text('Worker'),
                  ),
                  DropdownMenuItem(
                    value: 'employer',
                    child: Text('Employer'),
                  ),
                ],
                decoration: AppStyles.textFieldDecoration.copyWith(
                  labelText: 'Role (Worker or Employer)',
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _signup,
                style: AppStyles.primaryButtonStyle,
                child: Text('Sign Up'),
              ),
              TextButton(
                onPressed: () {
                  // Implement navigation to the login page here.
                },
                child: Text('.'),
              ),
            ],
          ),
        ],
      ),
    );
  }
}



....................
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'email_verification_page.dart';

class OtpVerificationPage extends StatefulWidget {
  final String? verificationId;

  OtpVerificationPage({this.verificationId});

  @override
  _OtpVerificationPageState createState() => _OtpVerificationPageState();
}

class _OtpVerificationPageState extends State<OtpVerificationPage> {
  final _otpController = TextEditingController();

  Future<void> _verifyOtp() async {
    try {
      PhoneAuthCredential credential = PhoneAuthProvider.credential(
        verificationId: widget.verificationId!,
        smsCode: _otpController.text,
      );

      await FirebaseAuth.instance.signInWithCredential(credential);

      // Navigate to the email verification page
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          builder: (context) => EmailVerificationPage(),
        ),
      );
    } catch (e) {
      // Handle OTP verification errors here.
      print(e.toString());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('OTP Verification'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(40.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _otpController,
              decoration: InputDecoration(labelText: 'Enter OTP'),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _verifyOtp,
              child: Text('Verify OTP'),
            ),
          ],
        ),
      ),
    );
  }
}
await FirebaseAuth.instance.verifyPhoneNumber(
  phoneNumber: '+44 7123 123 456',
  verificationCompleted: (PhoneAuthCredential credential) {},
  verificationFailed: (FirebaseAuthException e) {},
  codeSent: (String verificationId, int? resendToken) {},
  codeAutoRetrievalTimeout: (String verificationId) {},
);
// ... (your imports)

class SignupForm extends StatefulWidget {
  @override
  _SignupFormState createState() => _SignupFormState();
}

class _SignupFormState extends State<SignupForm> {
  // ... (your existing code)

  Future<void> _signup() async {
    try {
      await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: _emailController.text,
        password: _passwordController.text,
      );

      User? user = FirebaseAuth.instance.currentUser;
      if (user != null && !user.emailVerified) {
        await user.sendEmailVerification();
      }

      await FirebaseFirestore.instance
          .collection('users')
          .doc(_auth.currentUser!.uid)
          .set({
        'email': _emailController.text,
        'phoneNumber': _phoneNumberController.text,
        'role': _selectedRole,
      });

      await _auth.verifyPhoneNumber(
        phoneNumber: _phoneNumberController.text,
        verificationCompleted: (PhoneAuthCredential credential) {},
        verificationFailed: (FirebaseAuthException e) {
          print(e.message);
        },
        codeSent: (String verificationId, int? resendToken) {
          Navigator.of(context).pushReplacement(
            MaterialPageRoute(
              builder: (context) => OtpVerificationPage(verificationId),
            ),
          );
        },
        // Commented out for now
        // codeAutoRetrievalTimeout: (String verificationId) {},
      );
    } catch (e) {
      print(e.toString());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(40.0),
      child: ListView(
        children: [
          // ... (your existing UI code)
        ],
      ),
    );
  }
}

....m.m.mm.mmm.

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_app_check/firebase_app_check.dart';

import 'signup_form.dart'; // Replace with your main app file

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  
  // Initialize Firebase App Check
  FirebaseAppCheck.instance.activate(webRecaptchaSiteKey: 'your_recaptcha_site_key');

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase App Check Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SignupForm(), // Replace with your main app widget
    );
  }
}



,.,.,.MM,,MM,m


Future<void> _signup(BuildContext context) async {
  try {
    print("Starting signup process...");
    // ... rest of your code ...

    print("Email verification started...");
    if (user != null && !user.emailVerified) {
      await user.sendEmailVerification();
      print("Email verification sent.");
    }

    print("Saving user details to Firestore...");
    await FirebaseFirestore.instance
        .collection('users')
        .doc(_auth.currentUser!.uid)
        .set({
      'email': _emailController.text,
      'phoneNumber': _phoneNumberController.text,
      'role': _selectedRole,
    });

    print("Sending OTP to phone...");
    await _auth.verifyPhoneNumber(
      phoneNumber: _phoneNumberController.text,
      // ... rest of your phone auth code ...
    );

    print("Signup process completed.");
  } catch (e) {
    print("Error during signup: $e");
  }
}

await _auth.verifyPhoneNumber(
        phoneNumber: '+91${_phoneNumberController.text}',
        // timeout: Duration(seconds: 300),
        verificationCompleted: (PhoneAuthCredential credential) async {
          await _auth.signInWithCredential(credential);
          print('Phone number automatically verified');
        },
        verificationFailed: (FirebaseAuthException e) {
          print('Phone number verification failed: $e');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Phone number verification failed: $e'),
            ),
          );
        },
        codeSent: (String verificationId, int? resendToken) {
          _verificationId = verificationId;
          setState(() {
            _isOtpSent = true;
          });
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('OTP is Sent!!'),
            ),
          );
        },
        codeAutoRetrievalTimeout: (String verificationId) {
          _verificationId = verificationId;
        },
      );