class FilterTag extends StatelessWidget {
  final String tag;
  final bool isSelected;
  final VoidCallback? onTap;

  FilterTag({
    required this.tag,
    required this.isSelected,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: isSelected ? Colors.deepPurple : Colors.white30,
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: isSelected ? Colors.deepPurple : Colors.deepPurple.withOpacity(0.5),
            width: isSelected ? 2 : 1,
          ),
        ),
        child: Text(
          tag,
          style: TextStyle(
            color: isSelected ? Colors.white : Colors.black,
          ),
        ),
      ),
    );
  }
}

class _WorkerHomePageState extends State<WorkerHomePage> {
  int _selectedIndex = 0;
  late TextEditingController _searchController = TextEditingController();
  String? _selectedJobType;

  @override
  void initState() {
    super.initState();
    _searchController = TextEditingController();
    _selectedJobType = null;
  }

  // Other methods remain the same

  void _filterJobsByType(String jobType) {
    setState(() {
      _selectedJobType = jobType; // Update selected job type
    });
  }

  void _clearFilters() {
    setState(() {
      _selectedJobType = null; // Clear selected job type
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: Text(
          'Work1 Daily',
          style: AppStyles.appBarTitle,
        ),
        backgroundColor: AppStyles.appBarColor,
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // Other widgets remain the same
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Wrap(
                spacing: 8,
                runSpacing: 8,
                children: [
                  FilterTag(
                    tag: 'Home',
                    isSelected: _selectedJobType == null,
                    onTap: _clearFilters,
                  ),
                  FilterTag(
                    tag: 'Construction',
                    isSelected: _selectedJobType == 'Construction',
                    onTap: () => _filterJobsByType('Construction'),
                  ),
                  // Add other FilterTag widgets for each job type
                  // Example:
                  // FilterTag(
                  //   tag: 'Outdoor',
                  //   isSelected: _selectedJobType == 'Outdoor',
                  //   onTap: () => _filterJobsByType('Outdoor'),
                  // ),
                ],
              ),
            ),
          ),
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: _selectedJobType != null
                  ? FirebaseFirestore.instance
                      .collection('jobPostings')
                      .where('jobType', isEqualTo: _selectedJobType)
                      .snapshots()
                  : FirebaseFirestore.instance
                      .collection('jobPostings')
                      .snapshots(),
              builder: (context, snapshot) {
                // Builder logic remains the same
              },
            ),
          ),
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        // Bottom navigation bar logic remains the same
      ),
    );
  }
}
